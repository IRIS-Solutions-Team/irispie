name: Test and deploy

on:
  workflow_dispatch:

jobs:
  Test_and_deploy:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
          path: ./irispie-package
          token: ${{ secrets.IRISPIE_CONTENTS_TOKEN }}

      - name: Set up identity
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          git config --local user.email "jaromir.benes@gmail.com"
          git config --local user.name "Jaromir Benes"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -e ./irispie-package
          pip install pytest toml

      - name: Run tests
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          pytest ./tests/series -ra > ./tests/report.txt

      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Test results
          path: ./irispie-package/tests/report.txt

      - name: Bump version in pyproject.toml
        if: ${{ success() }}
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          if ! [[ -e ./.release_type ]]; then
            echo "Cannot release without .release_type"
            exit 1
          fi
          RELEASE_TYPE=$(< ./.release_type)
          NEW_VERSION=$(python ./.github/workflows/bump_version.py \
            --release_type=$RELEASE_TYPE \
            --source_path=./pyproject.toml \
            --target_path=./pyproject.toml \
          )
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push test results and new version to develop
        if: ${{ success() }}
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          NEW_VERSION=${{ env.NEW_VERSION }}
          git add ./pyproject.toml ./tests/report.txt
          git commit -m "Update test results and bump version number to $NEW_VERSION"
          git push origin develop

      - name: Merge to master, tag and push
        if: ${{ success() }}
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          NEW_VERSION=${{ env.NEW_VERSION }}
          git branch
          git switch master
          git pull origin master
          git merge -X theirs -m "Release irispie-package $NEW_VERSION" develop
          git ls-tree master
          git tag $NEW_VERSION
          git push origin master --tags
          git switch develop

      - name: Remove .release_type from develop
        if: ${{ success() }}
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          git switch develop
          git rm .release_type
          git commit -m "Remove .release_type after release"
          git push origin develop

      - name: Install build and twine
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m pip install --upgrade twine

      - name: Build dist files
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          NEW_VERSION=${{ env.NEW_VERSION }}
          git switch master
          echo "Building version ${{ env.NEW_VERSION }}"
          python -m build

      - name: Upload to PYPI
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          python -m twine upload dist/* -r pypi -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} --verbose

      - name: Upload new dist as artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-${{ env.NEW_VERSION }}
          path: irispie-package/dist/*

