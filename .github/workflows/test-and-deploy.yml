name: Test and deploy

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
          path: ./irispie-package
          token: ${{ secrets.IRISPIE_TOKEN_2025 }}
          repository: IRIS-Solutions-Team/irispie

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install -e irispie-package
          pip install pytest toml

      - name: Run tests
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          pytest @tests/specs

  version-bump:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump-version.outputs.new-version }}
    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
          path: ./irispie-package
          token: ${{ secrets.IRISPIE_TOKEN_2025 }}
          repository: IRIS-Solutions-Team/irispie

      - name: Set up identity
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          git config --local user.email "jaromir.benes@gmail.com"
          git config --local user.name "Jaromir Benes"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies for version bumping
        run: |
          pip install toml

      - name: Bump version in pyproject.toml
        id: bump-version
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          if ! [[ -e ./.release_type ]]; then
            echo "Cannot release without .release_type"
            exit 1
          fi
          RELEASE_TYPE=$(< ./.release_type)
          NEW_VERSION=$(python ./.github/workflows/bump_version.py \
            --release_type=$RELEASE_TYPE \
            --source_path=./pyproject.toml \
            --target_path=./pyproject.toml \
          )
          python ./.github/workflows/make_edition.py \
            --source_path=./pyproject.toml \
            --target_path=./pyproject.toml \
            --edition=ce
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push new version to develop
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          NEW_VERSION=${{ env.NEW_VERSION }}
          git add ./pyproject.toml
          git commit -m "Bump version number to $NEW_VERSION"
          git push origin develop

      - name: Merge to master, tag and push
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          NEW_VERSION=${{ env.NEW_VERSION }}
          git branch
          git switch master
          git pull origin master
          git merge -X theirs -m "Release irispie-package $NEW_VERSION" develop
          git ls-tree master
          git tag $NEW_VERSION
          git push origin master --tags
          git switch develop

      - name: Remove .release_type from develop
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          git switch develop
          git rm .release_type
          git commit -m "Remove .release_type after release"
          git push origin develop

  deploy:
    needs: version-bump
    runs-on: ubuntu-latest
    env:
      NEW_VERSION: ${{ needs.version-bump.outputs.new-version }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          path: ./irispie-package
          token: ${{ secrets.IRISPIE_TOKEN_2025 }}
          repository: IRIS-Solutions-Team/irispie

      - name: Set up identity
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          git config --local user.email "jaromir.benes@gmail.com"
          git config --local user.name "Jaromir Benes"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m pip install --upgrade twine
          pip install -e irispie-package

      - name: Build dist files
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          echo "Building version ${{ env.NEW_VERSION }}"
          python -m build

      - name: Upload to PYPI
        run: |
          cd $GITHUB_WORKSPACE/irispie-package
          python -m twine upload dist/* -r pypi -u __token__ -p ${{ secrets.PYPI_API_TOKEN_ALL }} --verbose

      - name: Upload new dist as artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-${{ env.NEW_VERSION }}
          path: irispie-package/dist/*

      - name: Create release
        id: create_release
        env:
          tag: ${{ env.NEW_VERSION }}
          GH_TOKEN: ${{ secrets.IRISPIE_TOKEN_2025 }}
        run: |
         cd $GITHUB_WORKSPACE/irispie-package
         gh release create "$tag" \
           --title "Release $tag-ce" \
           --notes ""

